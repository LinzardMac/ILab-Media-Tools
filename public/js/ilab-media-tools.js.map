{"version":3,"sources":["../vendor/cropper/dist/cropper.js","ilab-crop.js","components/imgix-component.js","components/imgix-label.js","components/imgix-slider.js","components/imgix-color.js","components/imgix-alignment.js","components/imgix-media-chooser.js","components/imgix-pillbox.js","ilab-imgix-presets.js","ilab-sidebar-tabs.js","ilab-imgix.js"],"names":["factory","define","amd","exports","require","jQuery","$","isNumber","n","isNaN","isUndefined","toArray","obj","offset","args","push","slice","apply","proxy","fn","context","arguments","concat","isCrossOriginURL","url","parts","match","location","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","indexOf","getCrossOrigin","crossOrigin","getImageSize","image","callback","newImage","naturalWidth","IS_SAFARI_OR_UIWEBVIEW","naturalHeight","document","createElement","onload","this","width","height","src","getTransform","options","transforms","rotate","scaleX","scaleY","length","join","getRotatedSizes","data","isReversed","newWidth","newHeight","deg","abs","degree","arc","Math","PI","sinArc","sin","cosArc","cos","aspectRatio","getSourceCanvas","translateX","translateY","rotated","canvas","getContext","dstX","dstY","dstWidth","dstHeight","scalable","rotatable","advanced","canvasWidth","canvasHeight","save","translate","scale","drawImage","floor","restore","getTouchesCenter","touches","pageX","pageY","each","i","touch","getStringFromCharCode","dataView","start","str","fromCharCode","getUint8","getOrientation","arrayBuffer","orientation","exifIDCode","tiffOffset","firstIFDOffset","littleEndian","endianness","app1Start","ifdStart","DataView","byteLength","getUint16","getUint32","setUint16","dataURLToArrayBuffer","dataURL","base64","replace","REGEXP_DATA_URL_HEAD","binary","atob","ArrayBuffer","Uint8Array","charCodeAt","arrayBufferToDataURL","btoa","Cropper","element","$element","extend","DEFAULTS","isPlainObject","isLoaded","isBuilt","isCompleted","isRotated","isCropped","isDisabled","isReplaced","isLimited","wheeling","isImg","originalUrl","cropBox","init","$window","window","$document","navigator","NAMESPACE","CLASS_MODAL","CLASS_HIDE","CLASS_HIDDEN","CLASS_INVISIBLE","CLASS_MOVE","CLASS_CROP","CLASS_DISABLED","CLASS_BG","EVENT_MOUSE_DOWN","EVENT_MOUSE_MOVE","EVENT_MOUSE_UP","EVENT_WHEEL","EVENT_DBLCLICK","EVENT_LOAD","EVENT_ERROR","EVENT_RESIZE","EVENT_BUILD","EVENT_BUILT","EVENT_CROP_START","EVENT_CROP_MOVE","EVENT_CROP_END","EVENT_CROP","EVENT_ZOOM","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","DATA_PREVIEW","DATA_ACTION","ACTION_EAST","ACTION_WEST","ACTION_SOUTH","ACTION_NORTH","ACTION_SOUTH_EAST","ACTION_SOUTH_WEST","ACTION_NORTH_EAST","ACTION_NORTH_WEST","ACTION_ALL","ACTION_CROP","ACTION_MOVE","ACTION_ZOOM","ACTION_NONE","SUPPORT_CANVAS","isFunction","test","userAgent","num","Number","min","max","sqrt","round","String","prototype","constructor","$this","is","attr","prop","toDataURL","load","trigger","type","e","Event","read","xhr","one","build","isDefaultPrevented","checkOrientation","clone","XMLHttpRequest","onerror","onabort","response","checkCrossOrigin","open","responseType","send","crossOriginUrl","$clone","complete","stop","addClass","insertAfter","$image","off","remove","$cropper","$cropBox","$face","unbuild","$container","parent","TEMPLATE","$canvas","find","append","$dragBox","$viewBox","after","removeClass","initPreview","bind","NaN","viewMode","autoCrop","modal","guides","center","cropBoxMovable","highlight","background","cropBoxResizable","setDragMode","dragMode","render","setData","built","setTimeout","getData","initialImage","initialCanvas","initialCropBox","container","unbind","resetPreview","$preview","initContainer","initCanvas","initCropBox","renderCanvas","renderCropBox","css","minContainerWidth","minContainerHeight","containerWidth","containerHeight","imageNaturalWidth","imageNaturalHeight","is90Degree","oldLeft","left","oldTop","top","limitCanvas","isSizeLimited","isPositionLimited","minCanvasWidth","minCanvasHeight","newCanvasLeft","newCanvasTop","minWidth","minHeight","maxWidth","Infinity","maxHeight","minLeft","minTop","maxLeft","maxTop","isChanged","renderImage","limitCropBox","output","reversed","marginLeft","marginTop","transform","autoCropArea","minCropBoxWidth","minCropBoxHeight","maxCropBoxWidth","maxCropBoxHeight","movable","preview","$clone2","html","removeData","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","ratio","cropstart","on","cropmove","cropend","crop","zoom","cropStart","zoomable","zoomOnWheel","wheel","toggleDragModeOnDblclick","dblclick","_cropMove","cropMove","_cropEnd","cropEnd","responsive","_resize","resize","canvasData","cropBoxData","getCanvasData","getCropBoxData","setCanvasData","setCropBoxData","hasClass","event","originalEvent","wheelZoomRatio","delta","preventDefault","deltaY","wheelDelta","detail","touchesLength","action","zoomOnTouch","startX2","startY2","target","cropping","startX","startY","endX2","endY2","endX","endY","change","shiftKey","toggleClass","range","right","bottom","renderable","x","y","X","Y","move","x1","y1","x2","y2","z1","z2","reset","clear","onlyColorChanged","add","enable","disable","destroy","offsetX","offsetY","moveTo","_event","zoomTo","oldRatio","rotateTo","isRounded","isScaled","call","getContainerData","getImageData","isWidthChanged","isHeightChanged","getCroppedCanvas","scaledWidth","scaledHeight","scaledRatio","fillColor","fillStyle","fillRect","srcWidth","srcHeight","source","sourceWidth","sourceHeight","params","srcX","srcY","setAspectRatio","mode","croppable","setDefaults","other","cropper","option","result","Constructor","noConflict","ILabCrop","settings","modalContainer","modal_id","cropperData","resizeTimerId","cropRef","isResizing","ilabTabs","currentValue","size","tabSelected","tab","ILabModal","loadURL","console","log","bindUI","prev_crop_x","prev_crop_y","prev_crop_width","prev_crop_height","updatePreviewWidth","clearTimeout","_resized","aspect_ratio","hasOwnProperty","cropped_src","size_title","text","min_width","min_height","mouseWheelZoom","dragCrop","checkImageOrigin","displayStatus","image_id","post","ajaxurl","status","hideStatus","message","ImgixComponents","byteToHex","byte","hexChar","utilities","imgixLabel","changeTimerId","label","currentVal","textInput","keyCode","changed","val","parseInt","metaKey","select","focus","ImgixSlider","delegate","valueLabel","slider","resetButton","defaultValue","param","sliderRef","newVal","hide","show","saveValue","ImgixColor","colorPicker","alphaSlider","colorPickerRef","blendParam","blendSelect","currentBlend","wpColorPicker","palettes","ui","blend","undefined","alpha","substring","parseFloat","ImgixAlignment","alignmentParam","alignmentRef","button","ImgixMediaChooser","mediaInput","selectButton","uploader","wp","media","title","multiple","mediaRef","attachment","state","get","first","toJSON","id","removeAttr","replaceWith","ImgixPillbox","values","split","buttons","inputs","pillboxRef","valueName","Object","keys","forEach","key","index","vals","ILabImgixPresets","presetSelect","presetContainer","presetDefaultCheckbox","self","resetAll","preset","presets","default_for","bindPreset","newPreset","savePreset","deletePreset","currentPreset","clearSelected","setCurrentPreset","is_default","name","prompt","postAjax","confirm","ilabSidebarTabs","firstTab","otherTab","tabTarget","ILabImageEdit","_preview","waitModal","debug","previewImage","previewTimeout","previewsSuspended","parameters","paramName","postData","value","makeDirty","p","rebind","makeClean"],"mappings":"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","file":"ilab-media-tools.js","sourcesContent":["/*!\n * Cropper v2.3.2\n * https://github.com/fengyuanchen/cropper\n *\n * Copyright (c) 2014-2016 Fengyuan Chen and contributors\n * Released under the MIT license\n *\n * Date: 2016-06-08T12:14:46.286Z\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node / CommonJS\n    factory(require('jquery'));\n  } else {\n    // Browser globals.\n    factory(jQuery);\n  }\n})(function ($) {\n\n  'use strict';\n\n  // Globals\n  var $window = $(window);\n  var $document = $(document);\n  var location = window.location;\n  var navigator = window.navigator;\n  var ArrayBuffer = window.ArrayBuffer;\n  var Uint8Array = window.Uint8Array;\n  var DataView = window.DataView;\n  var btoa = window.btoa;\n\n  // Constants\n  var NAMESPACE = 'cropper';\n\n  // Classes\n  var CLASS_MODAL = 'cropper-modal';\n  var CLASS_HIDE = 'cropper-hide';\n  var CLASS_HIDDEN = 'cropper-hidden';\n  var CLASS_INVISIBLE = 'cropper-invisible';\n  var CLASS_MOVE = 'cropper-move';\n  var CLASS_CROP = 'cropper-crop';\n  var CLASS_DISABLED = 'cropper-disabled';\n  var CLASS_BG = 'cropper-bg';\n\n  // Events\n  var EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown';\n  var EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove';\n  var EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_LOAD = 'load.' + NAMESPACE;\n  var EVENT_ERROR = 'error.' + NAMESPACE;\n  var EVENT_RESIZE = 'resize.' + NAMESPACE; // Bind to window with namespace\n  var EVENT_BUILD = 'build.' + NAMESPACE;\n  var EVENT_BUILT = 'built.' + NAMESPACE;\n  var EVENT_CROP_START = 'cropstart.' + NAMESPACE;\n  var EVENT_CROP_MOVE = 'cropmove.' + NAMESPACE;\n  var EVENT_CROP_END = 'cropend.' + NAMESPACE;\n  var EVENT_CROP = 'crop.' + NAMESPACE;\n  var EVENT_ZOOM = 'zoom.' + NAMESPACE;\n\n  // RegExps\n  var REGEXP_ACTIONS = /e|w|s|n|se|sw|ne|nw|all|crop|move|zoom/;\n  var REGEXP_DATA_URL = /^data\\:/;\n  var REGEXP_DATA_URL_HEAD = /^data\\:([^\\;]+)\\;base64,/;\n  var REGEXP_DATA_URL_JPEG = /^data\\:image\\/jpeg.*;base64,/;\n\n  // Data keys\n  var DATA_PREVIEW = 'preview';\n  var DATA_ACTION = 'action';\n\n  // Actions\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_NONE = 'none';\n\n  // Supports\n  var SUPPORT_CANVAS = $.isFunction($('<canvas>')[0].getContext);\n  var IS_SAFARI_OR_UIWEBVIEW = navigator && /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent);\n\n  // Maths\n  var num = Number;\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n  var sin = Math.sin;\n  var cos = Math.cos;\n  var sqrt = Math.sqrt;\n  var round = Math.round;\n  var floor = Math.floor;\n\n  // Utilities\n  var fromCharCode = String.fromCharCode;\n\n  function isNumber(n) {\n    return typeof n === 'number' && !isNaN(n);\n  }\n\n  function isUndefined(n) {\n    return typeof n === 'undefined';\n  }\n\n  function toArray(obj, offset) {\n    var args = [];\n\n    // This is necessary for IE8\n    if (isNumber(offset)) {\n      args.push(offset);\n    }\n\n    return args.slice.apply(obj, args);\n  }\n\n  // Custom proxy to avoid jQuery's guid\n  function proxy(fn, context) {\n    var args = toArray(arguments, 2);\n\n    return function () {\n      return fn.apply(context, args.concat(toArray(arguments)));\n    };\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(/^(https?:)\\/\\/([^\\:\\/\\?#]+):?(\\d*)/i);\n\n    return parts && (\n      parts[1] !== location.protocol ||\n      parts[2] !== location.hostname ||\n      parts[3] !== location.port\n    );\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + (new Date()).getTime();\n\n    return (url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp);\n  }\n\n  function getCrossOrigin(crossOrigin) {\n    return crossOrigin ? ' crossOrigin=\"' + crossOrigin + '\"' : '';\n  }\n\n  function getImageSize(image, callback) {\n    var newImage;\n\n    // Modern browsers (ignore Safari, #120 & #509)\n    if (image.naturalWidth && !IS_SAFARI_OR_UIWEBVIEW) {\n      return callback(image.naturalWidth, image.naturalHeight);\n    }\n\n    // IE8: Don't use `new Image()` here (#319)\n    newImage = document.createElement('img');\n\n    newImage.onload = function () {\n      callback(this.width, this.height);\n    };\n\n    newImage.src = image.src;\n  }\n\n  function getTransform(options) {\n    var transforms = [];\n    var rotate = options.rotate;\n    var scaleX = options.scaleX;\n    var scaleY = options.scaleY;\n\n    // Scale should come first before rotate (#633)\n    if (isNumber(scaleX) && isNumber(scaleY)) {\n      transforms.push('scale(' + scaleX + ',' + scaleY + ')');\n    }\n\n    if (isNumber(rotate)) {\n      transforms.push('rotate(' + rotate + 'deg)');\n    }\n\n    return transforms.length ? transforms.join(' ') : 'none';\n  }\n\n  function getRotatedSizes(data, isReversed) {\n    var deg = abs(data.degree) % 180;\n    var arc = (deg > 90 ? (180 - deg) : deg) * Math.PI / 180;\n    var sinArc = sin(arc);\n    var cosArc = cos(arc);\n    var width = data.width;\n    var height = data.height;\n    var aspectRatio = data.aspectRatio;\n    var newWidth;\n    var newHeight;\n\n    if (!isReversed) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data) {\n    var canvas = $('<canvas>')[0];\n    var context = canvas.getContext('2d');\n    var dstX = 0;\n    var dstY = 0;\n    var dstWidth = data.naturalWidth;\n    var dstHeight = data.naturalHeight;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n    var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n    var rotatable = isNumber(rotate) && rotate !== 0;\n    var advanced = rotatable || scalable;\n    var canvasWidth = dstWidth * abs(scaleX || 1);\n    var canvasHeight = dstHeight * abs(scaleY || 1);\n    var translateX;\n    var translateY;\n    var rotated;\n\n    if (scalable) {\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    if (rotatable) {\n      rotated = getRotatedSizes({\n        width: canvasWidth,\n        height: canvasHeight,\n        degree: rotate\n      });\n\n      canvasWidth = rotated.width;\n      canvasHeight = rotated.height;\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (advanced) {\n      dstX = -dstWidth / 2;\n      dstY = -dstHeight / 2;\n\n      context.save();\n      context.translate(translateX, translateY);\n    }\n\n    // Scale should come first before rotate (#633, #709)\n    if (scalable) {\n      context.scale(scaleX, scaleY);\n    }\n\n    if (rotatable) {\n      context.rotate(rotate * Math.PI / 180);\n    }\n\n    context.drawImage(image, floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));\n\n    if (advanced) {\n      context.restore();\n    }\n\n    return canvas;\n  }\n\n  function getTouchesCenter(touches) {\n    var length = touches.length;\n    var pageX = 0;\n    var pageY = 0;\n\n    if (length) {\n      $.each(touches, function (i, touch) {\n        pageX += touch.pageX;\n        pageY += touch.pageY;\n      });\n\n      pageX /= length;\n      pageY /= length;\n    }\n\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    var i;\n\n    for (i = start, length += start; i < length; i++) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n\n  function getOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var length = dataView.byteLength;\n    var orientation;\n    var exifIDCode;\n    var tiffOffset;\n    var firstIFDOffset;\n    var littleEndian;\n    var endianness;\n    var app1Start;\n    var ifdStart;\n    var offset;\n    var i;\n\n    // Only handle JPEG image (start by 0xFFD8)\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      offset = 2;\n\n      while (offset < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset++;\n      }\n    }\n\n    if (app1Start) {\n      exifIDCode = app1Start + 4;\n      tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        endianness = dataView.getUint16(tiffOffset);\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n          if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n            firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n            if (firstIFDOffset >= 0x00000008) {\n              ifdStart = tiffOffset + firstIFDOffset;\n            }\n          }\n        }\n      }\n    }\n\n    if (ifdStart) {\n      length = dataView.getUint16(ifdStart, littleEndian);\n\n      for (i = 0; i < length; i++) {\n        offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) {\n\n          // 8 is the offset of the current tag's value\n          offset += 8;\n\n          // Get the original orientation value\n          orientation = dataView.getUint16(offset, littleEndian);\n\n          // Override the orientation with its default value for Safari (#120)\n          if (IS_SAFARI_OR_UIWEBVIEW) {\n            dataView.setUint16(offset, 1, littleEndian);\n          }\n\n          break;\n        }\n      }\n    }\n\n    return orientation;\n  }\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var length = binary.length;\n    var arrayBuffer = new ArrayBuffer(length);\n    var dataView = new Uint8Array(arrayBuffer);\n    var i;\n\n    for (i = 0; i < length; i++) {\n      dataView[i] = binary.charCodeAt(i);\n    }\n\n    return arrayBuffer;\n  }\n\n  // Only available for JPEG image\n  function arrayBufferToDataURL(arrayBuffer) {\n    var dataView = new Uint8Array(arrayBuffer);\n    var length = dataView.length;\n    var base64 = '';\n    var i;\n\n    for (i = 0; i < length; i++) {\n      base64 += fromCharCode(dataView[i]);\n    }\n\n    return 'data:image/jpeg;base64,' + btoa(base64);\n  }\n\n  function Cropper(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Cropper.DEFAULTS, $.isPlainObject(options) && options);\n    this.isLoaded = false;\n    this.isBuilt = false;\n    this.isCompleted = false;\n    this.isRotated = false;\n    this.isCropped = false;\n    this.isDisabled = false;\n    this.isReplaced = false;\n    this.isLimited = false;\n    this.wheeling = false;\n    this.isImg = false;\n    this.originalUrl = '';\n    this.canvas = null;\n    this.cropBox = null;\n    this.init();\n  }\n\n  Cropper.prototype = {\n    constructor: Cropper,\n\n    init: function () {\n      var $this = this.$element;\n      var url;\n\n      if ($this.is('img')) {\n        this.isImg = true;\n\n        // Should use `$.fn.attr` here. e.g.: \"img/picture.jpg\"\n        this.originalUrl = url = $this.attr('src');\n\n        // Stop when it's a blank image\n        if (!url) {\n          return;\n        }\n\n        // Should use `$.fn.prop` here. e.g.: \"http://example.com/img/picture.jpg\"\n        url = $this.prop('src');\n      } else if ($this.is('canvas') && SUPPORT_CANVAS) {\n        url = $this[0].toDataURL();\n      }\n\n      this.load(url);\n    },\n\n    // A shortcut for triggering custom events\n    trigger: function (type, data) {\n      var e = $.Event(type, data);\n\n      this.$element.trigger(e);\n\n      return e;\n    },\n\n    load: function (url) {\n      var options = this.options;\n      var $this = this.$element;\n      var read;\n      var xhr;\n\n      if (!url) {\n        return;\n      }\n\n      // Trigger build event first\n      $this.one(EVENT_BUILD, options.build);\n\n      if (this.trigger(EVENT_BUILD).isDefaultPrevented()) {\n        return;\n      }\n\n      this.url = url;\n      this.image = {};\n\n      if (!options.checkOrientation || !ArrayBuffer) {\n        return this.clone();\n      }\n\n      read = $.proxy(this.read, this);\n\n      // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n      if (REGEXP_DATA_URL.test(url)) {\n        return REGEXP_DATA_URL_JPEG.test(url) ?\n          read(dataURLToArrayBuffer(url)) :\n          this.clone();\n      }\n\n      xhr = new XMLHttpRequest();\n\n      xhr.onerror = xhr.onabort = $.proxy(function () {\n        this.clone();\n      }, this);\n\n      xhr.onload = function () {\n        read(this.response);\n      };\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url) && $this.prop('crossOrigin')) {\n        url = addTimestamp(url);\n      }\n\n      xhr.open('get', url);\n      xhr.responseType = 'arraybuffer';\n      xhr.send();\n    },\n\n    read: function (arrayBuffer) {\n      var options = this.options;\n      var orientation = getOrientation(arrayBuffer);\n      var image = this.image;\n      var rotate;\n      var scaleX;\n      var scaleY;\n\n      if (orientation > 1) {\n        this.url = arrayBufferToDataURL(arrayBuffer);\n\n        switch (orientation) {\n\n          // flip horizontal\n          case 2:\n            scaleX = -1;\n            break;\n\n          // rotate left 180°\n          case 3:\n            rotate = -180;\n            break;\n\n          // flip vertical\n          case 4:\n            scaleY = -1;\n            break;\n\n          // flip vertical + rotate right 90°\n          case 5:\n            rotate = 90;\n            scaleY = -1;\n            break;\n\n          // rotate right 90°\n          case 6:\n            rotate = 90;\n            break;\n\n          // flip horizontal + rotate right 90°\n          case 7:\n            rotate = 90;\n            scaleX = -1;\n            break;\n\n          // rotate left 90°\n          case 8:\n            rotate = -90;\n            break;\n        }\n      }\n\n      if (options.rotatable) {\n        image.rotate = rotate;\n      }\n\n      if (options.scalable) {\n        image.scaleX = scaleX;\n        image.scaleY = scaleY;\n      }\n\n      this.clone();\n    },\n\n    clone: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var url = this.url;\n      var crossOrigin = '';\n      var crossOriginUrl;\n      var $clone;\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url)) {\n        crossOrigin = $this.prop('crossOrigin');\n\n        if (crossOrigin) {\n          crossOriginUrl = url;\n        } else {\n          crossOrigin = 'anonymous';\n\n          // Bust cache (#148) when there is not a \"crossOrigin\" property\n          crossOriginUrl = addTimestamp(url);\n        }\n      }\n\n      this.crossOrigin = crossOrigin;\n      this.crossOriginUrl = crossOriginUrl;\n      this.$clone = $clone = $('<img' + getCrossOrigin(crossOrigin) + ' src=\"' + (crossOriginUrl || url) + '\">');\n\n      if (this.isImg) {\n        if ($this[0].complete) {\n          this.start();\n        } else {\n          $this.one(EVENT_LOAD, $.proxy(this.start, this));\n        }\n      } else {\n        $clone.\n          one(EVENT_LOAD, $.proxy(this.start, this)).\n          one(EVENT_ERROR, $.proxy(this.stop, this)).\n          addClass(CLASS_HIDE).\n          insertAfter($this);\n      }\n    },\n\n    start: function () {\n      var $image = this.$element;\n      var $clone = this.$clone;\n\n      if (!this.isImg) {\n        $clone.off(EVENT_ERROR, this.stop);\n        $image = $clone;\n      }\n\n      getImageSize($image[0], $.proxy(function (naturalWidth, naturalHeight) {\n        $.extend(this.image, {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        });\n\n        this.isLoaded = true;\n        this.build();\n      }, this));\n    },\n\n    stop: function () {\n      this.$clone.remove();\n      this.$clone = null;\n    },\n\n    build: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $clone = this.$clone;\n      var $cropper;\n      var $cropBox;\n      var $face;\n\n      if (!this.isLoaded) {\n        return;\n      }\n\n      // Unbuild first when replace\n      if (this.isBuilt) {\n        this.unbuild();\n      }\n\n      // Create cropper elements\n      this.$container = $this.parent();\n      this.$cropper = $cropper = $(Cropper.TEMPLATE);\n      this.$canvas = $cropper.find('.cropper-canvas').append($clone);\n      this.$dragBox = $cropper.find('.cropper-drag-box');\n      this.$cropBox = $cropBox = $cropper.find('.cropper-crop-box');\n      this.$viewBox = $cropper.find('.cropper-view-box');\n      this.$face = $face = $cropBox.find('.cropper-face');\n\n      // Hide the original image\n      $this.addClass(CLASS_HIDDEN).after($cropper);\n\n      // Show the clone image if is hidden\n      if (!this.isImg) {\n        $clone.removeClass(CLASS_HIDE);\n      }\n\n      this.initPreview();\n      this.bind();\n\n      options.aspectRatio = max(0, options.aspectRatio) || NaN;\n      options.viewMode = max(0, min(3, round(options.viewMode))) || 0;\n\n      if (options.autoCrop) {\n        this.isCropped = true;\n\n        if (options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      } else {\n        $cropBox.addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.guides) {\n        $cropBox.find('.cropper-dashed').addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        $cropBox.find('.cropper-center').addClass(CLASS_HIDDEN);\n      }\n\n      if (options.cropBoxMovable) {\n        $face.addClass(CLASS_MOVE).data(DATA_ACTION, ACTION_ALL);\n      }\n\n      if (!options.highlight) {\n        $face.addClass(CLASS_INVISIBLE);\n      }\n\n      if (options.background) {\n        $cropper.addClass(CLASS_BG);\n      }\n\n      if (!options.cropBoxResizable) {\n        $cropBox.find('.cropper-line, .cropper-point').addClass(CLASS_HIDDEN);\n      }\n\n      this.setDragMode(options.dragMode);\n      this.render();\n      this.isBuilt = true;\n      this.setData(options.data);\n      $this.one(EVENT_BUILT, options.built);\n\n      // Trigger the built event asynchronously to keep `data('cropper')` is defined\n      setTimeout($.proxy(function () {\n        this.trigger(EVENT_BUILT);\n        this.trigger(EVENT_CROP, this.getData());\n        this.isCompleted = true;\n      }, this), 0);\n    },\n\n    unbuild: function () {\n      if (!this.isBuilt) {\n        return;\n      }\n\n      this.isBuilt = false;\n      this.isCompleted = false;\n      this.initialImage = null;\n\n      // Clear `initialCanvas` is necessary when replace\n      this.initialCanvas = null;\n      this.initialCropBox = null;\n      this.container = null;\n      this.canvas = null;\n\n      // Clear `cropBox` is necessary when replace\n      this.cropBox = null;\n      this.unbind();\n\n      this.resetPreview();\n      this.$preview = null;\n\n      this.$viewBox = null;\n      this.$cropBox = null;\n      this.$dragBox = null;\n      this.$canvas = null;\n      this.$container = null;\n\n      this.$cropper.remove();\n      this.$cropper = null;\n    },\n\n    render: function () {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    initContainer: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $container = this.$container;\n      var $cropper = this.$cropper;\n\n      $cropper.addClass(CLASS_HIDDEN);\n      $this.removeClass(CLASS_HIDDEN);\n\n      $cropper.css((this.container = {\n        width: max($container.width(), num(options.minContainerWidth) || 200),\n        height: max($container.height(), num(options.minContainerHeight) || 100)\n      }));\n\n      $this.addClass(CLASS_HIDDEN);\n      $cropper.removeClass(CLASS_HIDDEN);\n    },\n\n    // Canvas (image wrapper)\n    initCanvas: function () {\n      var viewMode = this.options.viewMode;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var image = this.image;\n      var imageNaturalWidth = image.naturalWidth;\n      var imageNaturalHeight = image.naturalHeight;\n      var is90Degree = abs(image.rotate) === 90;\n      var naturalWidth = is90Degree ? imageNaturalHeight : imageNaturalWidth;\n      var naturalHeight = is90Degree ? imageNaturalWidth : imageNaturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerWidth;\n      var canvasHeight = containerHeight;\n      var canvas;\n\n      if (containerHeight * aspectRatio > containerWidth) {\n        if (viewMode === 3) {\n          canvasWidth = containerHeight * aspectRatio;\n        } else {\n          canvasHeight = containerWidth / aspectRatio;\n        }\n      } else {\n        if (viewMode === 3) {\n          canvasHeight = containerWidth / aspectRatio;\n        } else {\n          canvasWidth = containerHeight * aspectRatio;\n        }\n      }\n\n      canvas = {\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        aspectRatio: aspectRatio,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n\n      canvas.oldLeft = canvas.left = (containerWidth - canvasWidth) / 2;\n      canvas.oldTop = canvas.top = (containerHeight - canvasHeight) / 2;\n\n      this.canvas = canvas;\n      this.isLimited = (viewMode === 1 || viewMode === 2);\n      this.limitCanvas(true, true);\n      this.initialImage = $.extend({}, image);\n      this.initialCanvas = $.extend({}, canvas);\n    },\n\n    limitCanvas: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var viewMode = options.viewMode;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n      var cropBox = this.cropBox;\n      var isCropped = this.isCropped && cropBox;\n      var minCanvasWidth;\n      var minCanvasHeight;\n      var newCanvasLeft;\n      var newCanvasTop;\n\n      if (isSizeLimited) {\n        minCanvasWidth = num(options.minCanvasWidth) || 0;\n        minCanvasHeight = num(options.minCanvasHeight) || 0;\n\n        if (viewMode) {\n          if (viewMode > 1) {\n            minCanvasWidth = max(minCanvasWidth, containerWidth);\n            minCanvasHeight = max(minCanvasHeight, containerHeight);\n\n            if (viewMode === 3) {\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          } else {\n            if (minCanvasWidth) {\n              minCanvasWidth = max(minCanvasWidth, isCropped ? cropBox.width : 0);\n            } else if (minCanvasHeight) {\n              minCanvasHeight = max(minCanvasHeight, isCropped ? cropBox.height : 0);\n            } else if (isCropped) {\n              minCanvasWidth = cropBox.width;\n              minCanvasHeight = cropBox.height;\n\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          }\n        }\n\n        if (minCanvasWidth && minCanvasHeight) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          } else {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          }\n        } else if (minCanvasWidth) {\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        }\n\n        canvas.minWidth = minCanvasWidth;\n        canvas.minHeight = minCanvasHeight;\n        canvas.maxWidth = Infinity;\n        canvas.maxHeight = Infinity;\n      }\n\n      if (isPositionLimited) {\n        if (viewMode) {\n          newCanvasLeft = containerWidth - canvas.width;\n          newCanvasTop = containerHeight - canvas.height;\n\n          canvas.minLeft = min(0, newCanvasLeft);\n          canvas.minTop = min(0, newCanvasTop);\n          canvas.maxLeft = max(0, newCanvasLeft);\n          canvas.maxTop = max(0, newCanvasTop);\n\n          if (isCropped && this.isLimited) {\n            canvas.minLeft = min(\n              cropBox.left,\n              cropBox.left + cropBox.width - canvas.width\n            );\n            canvas.minTop = min(\n              cropBox.top,\n              cropBox.top + cropBox.height - canvas.height\n            );\n            canvas.maxLeft = cropBox.left;\n            canvas.maxTop = cropBox.top;\n\n            if (viewMode === 2) {\n              if (canvas.width >= containerWidth) {\n                canvas.minLeft = min(0, newCanvasLeft);\n                canvas.maxLeft = max(0, newCanvasLeft);\n              }\n\n              if (canvas.height >= containerHeight) {\n                canvas.minTop = min(0, newCanvasTop);\n                canvas.maxTop = max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvas.minLeft = -canvas.width;\n          canvas.minTop = -canvas.height;\n          canvas.maxLeft = containerWidth;\n          canvas.maxTop = containerHeight;\n        }\n      }\n    },\n\n    renderCanvas: function (isChanged) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var rotate = image.rotate;\n      var naturalWidth = image.naturalWidth;\n      var naturalHeight = image.naturalHeight;\n      var aspectRatio;\n      var rotated;\n\n      if (this.isRotated) {\n        this.isRotated = false;\n\n        // Computes rotated sizes with image sizes\n        rotated = getRotatedSizes({\n          width: image.width,\n          height: image.height,\n          degree: rotate\n        });\n\n        aspectRatio = rotated.width / rotated.height;\n\n        if (aspectRatio !== canvas.aspectRatio) {\n          canvas.left -= (rotated.width - canvas.width) / 2;\n          canvas.top -= (rotated.height - canvas.height) / 2;\n          canvas.width = rotated.width;\n          canvas.height = rotated.height;\n          canvas.aspectRatio = aspectRatio;\n          canvas.naturalWidth = naturalWidth;\n          canvas.naturalHeight = naturalHeight;\n\n          // Computes rotated sizes with natural image sizes\n          if (rotate % 180) {\n            rotated = getRotatedSizes({\n              width: naturalWidth,\n              height: naturalHeight,\n              degree: rotate\n            });\n\n            canvas.naturalWidth = rotated.width;\n            canvas.naturalHeight = rotated.height;\n          }\n\n          this.limitCanvas(true, false);\n        }\n      }\n\n      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {\n        canvas.left = canvas.oldLeft;\n      }\n\n      if (canvas.height > canvas.maxHeight || canvas.height < canvas.minHeight) {\n        canvas.top = canvas.oldTop;\n      }\n\n      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);\n      canvas.height = min(max(canvas.height, canvas.minHeight), canvas.maxHeight);\n\n      this.limitCanvas(false, true);\n\n      canvas.oldLeft = canvas.left = min(max(canvas.left, canvas.minLeft), canvas.maxLeft);\n      canvas.oldTop = canvas.top = min(max(canvas.top, canvas.minTop), canvas.maxTop);\n\n      this.$canvas.css({\n        width: canvas.width,\n        height: canvas.height,\n        left: canvas.left,\n        top: canvas.top\n      });\n\n      this.renderImage();\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCropBox(true, true);\n      }\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    renderImage: function (isChanged) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var reversed;\n\n      if (image.rotate) {\n        reversed = getRotatedSizes({\n          width: canvas.width,\n          height: canvas.height,\n          degree: image.rotate,\n          aspectRatio: image.aspectRatio\n        }, true);\n      }\n\n      $.extend(image, reversed ? {\n        width: reversed.width,\n        height: reversed.height,\n        left: (canvas.width - reversed.width) / 2,\n        top: (canvas.height - reversed.height) / 2\n      } : {\n        width: canvas.width,\n        height: canvas.height,\n        left: 0,\n        top: 0\n      });\n\n      this.$clone.css({\n        width: image.width,\n        height: image.height,\n        marginLeft: image.left,\n        marginTop: image.top,\n        transform: getTransform(image)\n      });\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    initCropBox: function () {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.aspectRatio;\n      var autoCropArea = num(options.autoCropArea) || 0.8;\n      var cropBox = {\n            width: canvas.width,\n            height: canvas.height\n          };\n\n      if (aspectRatio) {\n        if (canvas.height * aspectRatio > canvas.width) {\n          cropBox.height = cropBox.width / aspectRatio;\n        } else {\n          cropBox.width = cropBox.height * aspectRatio;\n        }\n      }\n\n      this.cropBox = cropBox;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      // The width of auto crop area must large than \"minWidth\", and the height too. (#164)\n      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);\n      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);\n      cropBox.oldLeft = cropBox.left = canvas.left + (canvas.width - cropBox.width) / 2;\n      cropBox.oldTop = cropBox.top = canvas.top + (canvas.height - cropBox.height) / 2;\n\n      this.initialCropBox = $.extend({}, cropBox);\n    },\n\n    limitCropBox: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var isLimited = this.isLimited;\n      var minCropBoxWidth;\n      var minCropBoxHeight;\n      var maxCropBoxWidth;\n      var maxCropBoxHeight;\n\n      if (isSizeLimited) {\n        minCropBoxWidth = num(options.minCropBoxWidth) || 0;\n        minCropBoxHeight = num(options.minCropBoxHeight) || 0;\n\n        // The min/maxCropBoxWidth/Height must be less than containerWidth/Height\n        minCropBoxWidth = min(minCropBoxWidth, containerWidth);\n        minCropBoxHeight = min(minCropBoxHeight, containerHeight);\n        maxCropBoxWidth = min(containerWidth, isLimited ? canvas.width : containerWidth);\n        maxCropBoxHeight = min(containerHeight, isLimited ? canvas.height : containerHeight);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        }\n\n        // The minWidth/Height must be less than maxWidth/Height\n        cropBox.minWidth = min(minCropBoxWidth, maxCropBoxWidth);\n        cropBox.minHeight = min(minCropBoxHeight, maxCropBoxHeight);\n        cropBox.maxWidth = maxCropBoxWidth;\n        cropBox.maxHeight = maxCropBoxHeight;\n      }\n\n      if (isPositionLimited) {\n        if (isLimited) {\n          cropBox.minLeft = max(0, canvas.left);\n          cropBox.minTop = max(0, canvas.top);\n          cropBox.maxLeft = min(containerWidth, canvas.left + canvas.width) - cropBox.width;\n          cropBox.maxTop = min(containerHeight, canvas.top + canvas.height) - cropBox.height;\n        } else {\n          cropBox.minLeft = 0;\n          cropBox.minTop = 0;\n          cropBox.maxLeft = containerWidth - cropBox.width;\n          cropBox.maxTop = containerHeight - cropBox.height;\n        }\n      }\n    },\n\n    renderCropBox: function () {\n      var options = this.options;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var cropBox = this.cropBox;\n\n      if (cropBox.width > cropBox.maxWidth || cropBox.width < cropBox.minWidth) {\n        cropBox.left = cropBox.oldLeft;\n      }\n\n      if (cropBox.height > cropBox.maxHeight || cropBox.height < cropBox.minHeight) {\n        cropBox.top = cropBox.oldTop;\n      }\n\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      this.limitCropBox(false, true);\n\n      cropBox.oldLeft = cropBox.left = min(max(cropBox.left, cropBox.minLeft), cropBox.maxLeft);\n      cropBox.oldTop = cropBox.top = min(max(cropBox.top, cropBox.minTop), cropBox.maxTop);\n\n      if (options.movable && options.cropBoxMovable) {\n\n        // Turn to move the canvas when the crop box is equal to the container\n        this.$face.data(DATA_ACTION, (cropBox.width === containerWidth && cropBox.height === containerHeight) ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      this.$cropBox.css({\n        width: cropBox.width,\n        height: cropBox.height,\n        left: cropBox.left,\n        top: cropBox.top\n      });\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.isDisabled) {\n        this.output();\n      }\n    },\n\n    output: function () {\n      this.preview();\n\n      if (this.isCompleted) {\n        this.trigger(EVENT_CROP, this.getData());\n      }\n    },\n\n    initPreview: function () {\n      var crossOrigin = getCrossOrigin(this.crossOrigin);\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var $clone2;\n\n      this.$preview = $(this.options.preview);\n      this.$clone2 = $clone2 = $('<img' + crossOrigin + ' src=\"' + url + '\">');\n      this.$viewBox.html($clone2);\n      this.$preview.each(function () {\n        var $this = $(this);\n\n        // Save the original size for recover\n        $this.data(DATA_PREVIEW, {\n          width: $this.width(),\n          height: $this.height(),\n          html: $this.html()\n        });\n\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * (Occur only when margin-top <= -height)\n         */\n        $this.html(\n          '<img' + crossOrigin + ' src=\"' + url + '\" style=\"' +\n          'display:block;width:100%;height:auto;' +\n          'min-width:0!important;min-height:0!important;' +\n          'max-width:none!important;max-height:none!important;' +\n          'image-orientation:0deg!important;\">'\n        );\n      });\n    },\n\n    resetPreview: function () {\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_PREVIEW);\n\n        $this.css({\n          width: data.width,\n          height: data.height\n        }).html(data.html).removeData(DATA_PREVIEW);\n      });\n    },\n\n    preview: function () {\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var cropBoxWidth = cropBox.width;\n      var cropBoxHeight = cropBox.height;\n      var width = image.width;\n      var height = image.height;\n      var left = cropBox.left - canvas.left - image.left;\n      var top = cropBox.top - canvas.top - image.top;\n\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      this.$clone2.css({\n        width: width,\n        height: height,\n        marginLeft: -left,\n        marginTop: -top,\n        transform: getTransform(image)\n      });\n\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        $this.css({\n          width: newWidth,\n          height: newHeight\n        }).find('img').css({\n          width: width * ratio,\n          height: height * ratio,\n          marginLeft: -left * ratio,\n          marginTop: -top * ratio,\n          transform: getTransform(image)\n        });\n      });\n    },\n\n    bind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.on(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.on(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.on(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.on(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.on(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.cropStart, this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        $cropper.on(EVENT_WHEEL, $.proxy(this.wheel, this));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));\n      }\n\n      $document.\n        on(EVENT_MOUSE_MOVE, (this._cropMove = proxy(this.cropMove, this))).\n        on(EVENT_MOUSE_UP, (this._cropEnd = proxy(this.cropEnd, this)));\n\n      if (options.responsive) {\n        $window.on(EVENT_RESIZE, (this._resize = proxy(this.resize, this)));\n      }\n    },\n\n    unbind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.off(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.off(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.off(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.off(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.off(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.off(EVENT_MOUSE_DOWN, this.cropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        $cropper.off(EVENT_WHEEL, this.wheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        $cropper.off(EVENT_DBLCLICK, this.dblclick);\n      }\n\n      $document.\n        off(EVENT_MOUSE_MOVE, this._cropMove).\n        off(EVENT_MOUSE_UP, this._cropEnd);\n\n      if (options.responsive) {\n        $window.off(EVENT_RESIZE, this._resize);\n      }\n    },\n\n    resize: function () {\n      var restore = this.options.restore;\n      var $container = this.$container;\n      var container = this.container;\n      var canvasData;\n      var cropBoxData;\n      var ratio;\n\n      // Check `container` is necessary for IE8\n      if (this.isDisabled || !container) {\n        return;\n      }\n\n      ratio = $container.width() / container.width;\n\n      // Resize when width changed or height changed\n      if (ratio !== 1 || $container.height() !== container.height) {\n        if (restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (restore) {\n          this.setCanvasData($.each(canvasData, function (i, n) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData($.each(cropBoxData, function (i, n) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n\n    dblclick: function () {\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (this.$dragBox.hasClass(CLASS_CROP)) {\n        this.setDragMode(ACTION_MOVE);\n      } else {\n        this.setDragMode(ACTION_CROP);\n      }\n    },\n\n    wheel: function (event) {\n      var e = event.originalEvent || event;\n      var ratio = num(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      event.preventDefault();\n\n      // Limit wheel speed to prevent zoom too fast\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n\n      setTimeout($.proxy(function () {\n        this.wheeling = false;\n      }, this), 50);\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, event);\n    },\n\n    cropStart: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = event;\n      var touchesLength;\n      var action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            e = touches[1];\n            this.startX2 = e.pageX;\n            this.startY2 = e.pageY;\n            action = ACTION_ZOOM;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      action = action || $(e.target).data(DATA_ACTION);\n\n      if (REGEXP_ACTIONS.test(action)) {\n        if (this.trigger(EVENT_CROP_START, {\n          originalEvent: originalEvent,\n          action: action\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.action = action;\n        this.cropping = false;\n\n        // IE8  has `event.pageX/Y`, but not `event.originalEvent.pageX/Y`\n        // IE10 has `event.originalEvent.pageX/Y`, but not `event.pageX/Y`\n        this.startX = e.pageX || originalEvent && originalEvent.pageX;\n        this.startY = e.pageY || originalEvent && originalEvent.pageY;\n\n        if (action === ACTION_CROP) {\n          this.cropping = true;\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      }\n    },\n\n    cropMove: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = event;\n      var action = this.action;\n      var touchesLength;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            e = touches[1];\n            this.endX2 = e.pageX;\n            this.endY2 = e.pageY;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      if (action) {\n        if (this.trigger(EVENT_CROP_MOVE, {\n          originalEvent: originalEvent,\n          action: action\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.endX = e.pageX || originalEvent && originalEvent.pageX;\n        this.endY = e.pageY || originalEvent && originalEvent.pageY;\n\n        this.change(e.shiftKey, action === ACTION_ZOOM ? event : null);\n      }\n    },\n\n    cropEnd: function (event) {\n      var originalEvent = event.originalEvent;\n      var action = this.action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (action) {\n        event.preventDefault();\n\n        if (this.cropping) {\n          this.cropping = false;\n          this.$dragBox.toggleClass(CLASS_MODAL, this.isCropped && this.options.modal);\n        }\n\n        this.action = '';\n\n        this.trigger(EVENT_CROP_END, {\n          originalEvent: originalEvent,\n          action: action\n        });\n      }\n    },\n\n    change: function (shiftKey, event) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var action = this.action;\n      var container = this.container;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var width = cropBox.width;\n      var height = cropBox.height;\n      var left = cropBox.left;\n      var top = cropBox.top;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = container.width;\n      var maxHeight = container.height;\n      var renderable = true;\n      var offset;\n      var range;\n\n      // Locking aspect ratio in \"free mode\" by holding shift key (#259)\n      if (!aspectRatio && shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.isLimited) {\n        minLeft = cropBox.minLeft;\n        minTop = cropBox.minTop;\n        maxWidth = minLeft + min(container.width, canvas.left + canvas.width);\n        maxHeight = minTop + min(container.height, canvas.top + canvas.height);\n      }\n\n      range = {\n        x: this.endX - this.startX,\n        y: this.endY - this.startY\n      };\n\n      if (aspectRatio) {\n        range.X = range.y * aspectRatio;\n        range.Y = range.x / aspectRatio;\n      }\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n\n        // Resize crop box\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top -= range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left -= range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += range.X;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        // Move canvas\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n\n        // Zoom canvas\n        case ACTION_ZOOM:\n          this.zoom((function (x1, y1, x2, y2) {\n            var z1 = sqrt(x1 * x1 + y1 * y1);\n            var z2 = sqrt(x2 * x2 + y2 * y2);\n\n            return (z2 - z1) / z1;\n          })(\n            abs(this.startX - this.startX2),\n            abs(this.startY - this.startY2),\n            abs(this.endX - this.endX2),\n            abs(this.endY - this.endY2)\n          ), event);\n          this.startX2 = this.endX2;\n          this.startY2 = this.endY2;\n          renderable = false;\n          break;\n\n        // Create crop box\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = this.$cropper.offset();\n          left = this.startX - offset.left;\n          top = this.startY - offset.top;\n          width = cropBox.minWidth;\n          height = cropBox.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          }\n\n          // Show the crop box if is hidden\n          if (!this.isCropped) {\n            this.$cropBox.removeClass(CLASS_HIDDEN);\n            this.isCropped = true;\n\n            if (this.isLimited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        // No default\n      }\n\n      if (renderable) {\n        cropBox.width = width;\n        cropBox.height = height;\n        cropBox.left = left;\n        cropBox.top = top;\n        this.action = action;\n\n        this.renderCropBox();\n      }\n\n      // Override\n      this.startX = this.endX;\n      this.startY = this.endY;\n    },\n\n    // Show the crop box manually\n    crop: function () {\n      if (!this.isBuilt || this.isDisabled) {\n        return;\n      }\n\n      if (!this.isCropped) {\n        this.isCropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n\n        this.$cropBox.removeClass(CLASS_HIDDEN);\n      }\n\n      this.setCropBoxData(this.initialCropBox);\n    },\n\n    // Reset the image and crop box to their initial states\n    reset: function () {\n      if (!this.isBuilt || this.isDisabled) {\n        return;\n      }\n\n      this.image = $.extend({}, this.initialImage);\n      this.canvas = $.extend({}, this.initialCanvas);\n      this.cropBox = $.extend({}, this.initialCropBox);\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    // Clear the crop box\n    clear: function () {\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      $.extend(this.cropBox, {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      });\n\n      this.isCropped = false;\n      this.renderCropBox();\n\n      this.limitCanvas(true, true);\n\n      // Render canvas after crop box rendered\n      this.renderCanvas();\n\n      this.$dragBox.removeClass(CLASS_MODAL);\n      this.$cropBox.addClass(CLASS_HIDDEN);\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     *\n     * @param {String} url\n     * @param {Boolean} onlyColorChanged (optional)\n     */\n    replace: function (url, onlyColorChanged) {\n      if (!this.isDisabled && url) {\n        if (this.isImg) {\n          this.$element.attr('src', url);\n        }\n\n        if (onlyColorChanged) {\n          this.url = url;\n          this.$clone.attr('src', url);\n\n          if (this.isBuilt) {\n            this.$preview.find('img').add(this.$clone2).attr('src', url);\n          }\n        } else {\n          if (this.isImg) {\n            this.isReplaced = true;\n          }\n\n          // Clear previous data\n          this.options.data = null;\n          this.load(url);\n        }\n      }\n    },\n\n    // Enable (unfreeze) the cropper\n    enable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = false;\n        this.$cropper.removeClass(CLASS_DISABLED);\n      }\n    },\n\n    // Disable (freeze) the cropper\n    disable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = true;\n        this.$cropper.addClass(CLASS_DISABLED);\n      }\n    },\n\n    // Destroy the cropper and remove the instance from the image\n    destroy: function () {\n      var $this = this.$element;\n\n      if (this.isLoaded) {\n        if (this.isImg && this.isReplaced) {\n          $this.attr('src', this.originalUrl);\n        }\n\n        this.unbuild();\n        $this.removeClass(CLASS_HIDDEN);\n      } else {\n        if (this.isImg) {\n          $this.off(EVENT_LOAD, this.start);\n        } else if (this.$clone) {\n          this.$clone.remove();\n        }\n      }\n\n      $this.removeData(NAMESPACE);\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     *\n     * @param {Number} offsetX\n     * @param {Number} offsetY (optional)\n     */\n    move: function (offsetX, offsetY) {\n      var canvas = this.canvas;\n\n      this.moveTo(\n        isUndefined(offsetX) ? offsetX : canvas.left + num(offsetX),\n        isUndefined(offsetY) ? offsetY : canvas.top + num(offsetY)\n      );\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     *\n     * @param {Number} x\n     * @param {Number} y (optional)\n     */\n    moveTo: function (x, y) {\n      var canvas = this.canvas;\n      var isChanged = false;\n\n      // If \"y\" is not present, its default value is \"x\"\n      if (isUndefined(y)) {\n        y = x;\n      }\n\n      x = num(x);\n      y = num(y);\n\n      if (this.isBuilt && !this.isDisabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvas.left = x;\n          isChanged = true;\n        }\n\n        if (isNumber(y)) {\n          canvas.top = y;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderCanvas(true);\n        }\n      }\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     *\n     * @param {Number} ratio\n     * @param {jQuery Event} _event (private)\n     */\n    zoom: function (ratio, _event) {\n      var canvas = this.canvas;\n\n      ratio = num(ratio);\n\n      if (ratio < 0) {\n        ratio =  1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      this.zoomTo(canvas.width * ratio / canvas.naturalWidth, _event);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     *\n     * @param {Number} ratio\n     * @param {jQuery Event} _event (private)\n     */\n    zoomTo: function (ratio, _event) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var width = canvas.width;\n      var height = canvas.height;\n      var naturalWidth = canvas.naturalWidth;\n      var naturalHeight = canvas.naturalHeight;\n      var originalEvent;\n      var newWidth;\n      var newHeight;\n      var offset;\n      var center;\n\n      ratio = num(ratio);\n\n      if (ratio >= 0 && this.isBuilt && !this.isDisabled && options.zoomable) {\n        newWidth = naturalWidth * ratio;\n        newHeight = naturalHeight * ratio;\n\n        if (_event) {\n          originalEvent = _event.originalEvent;\n        }\n\n        if (this.trigger(EVENT_ZOOM, {\n          originalEvent: originalEvent,\n          oldRatio: width / naturalWidth,\n          ratio: newWidth / naturalWidth\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        if (originalEvent) {\n          offset = this.$cropper.offset();\n          center = originalEvent.touches ? getTouchesCenter(originalEvent.touches) : {\n            pageX: _event.pageX || originalEvent.pageX || 0,\n            pageY: _event.pageY || originalEvent.pageY || 0\n          };\n\n          // Zoom from the triggering point of the event\n          canvas.left -= (newWidth - width) * (\n            ((center.pageX - offset.left) - canvas.left) / width\n          );\n          canvas.top -= (newHeight - height) * (\n            ((center.pageY - offset.top) - canvas.top) / height\n          );\n        } else {\n\n          // Zoom from the center of the canvas\n          canvas.left -= (newWidth - width) / 2;\n          canvas.top -= (newHeight - height) / 2;\n        }\n\n        canvas.width = newWidth;\n        canvas.height = newHeight;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     *\n     * @param {Number} degree\n     */\n    rotate: function (degree) {\n      this.rotateTo((this.image.rotate || 0) + num(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n     *\n     * @param {Number} degree\n     */\n    rotateTo: function (degree) {\n      degree = num(degree);\n\n      if (isNumber(degree) && this.isBuilt && !this.isDisabled && this.options.rotatable) {\n        this.image.rotate = degree % 360;\n        this.isRotated = true;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Scale the image\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n     *\n     * @param {Number} scaleX\n     * @param {Number} scaleY (optional)\n     */\n    scale: function (scaleX, scaleY) {\n      var image = this.image;\n      var isChanged = false;\n\n      // If \"scaleY\" is not present, its default value is \"scaleX\"\n      if (isUndefined(scaleY)) {\n        scaleY = scaleX;\n      }\n\n      scaleX = num(scaleX);\n      scaleY = num(scaleY);\n\n      if (this.isBuilt && !this.isDisabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          image.scaleX = scaleX;\n          isChanged = true;\n        }\n\n        if (isNumber(scaleY)) {\n          image.scaleY = scaleY;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderImage(true);\n        }\n      }\n    },\n\n    /**\n     * Scale the abscissa of the image\n     *\n     * @param {Number} scaleX\n     */\n    scaleX: function (scaleX) {\n      var scaleY = this.image.scaleY;\n\n      this.scale(scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the ordinate of the image\n     *\n     * @param {Number} scaleY\n     */\n    scaleY: function (scaleY) {\n      var scaleX = this.image.scaleX;\n\n      this.scale(isNumber(scaleX) ? scaleX : 1, scaleY);\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     *\n     * @param {Boolean} isRounded (optional)\n     * @return {Object} data\n     */\n    getData: function (isRounded) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var ratio;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          x: cropBox.left - canvas.left,\n          y: cropBox.top - canvas.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n\n        ratio = image.width / image.naturalWidth;\n\n        $.each(data, function (i, n) {\n          n = n / ratio;\n          data[i] = isRounded ? round(n) : n;\n        });\n\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = image.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = image.scaleX || 1;\n        data.scaleY = image.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     *\n     * @param {Object} data\n     */\n    setData: function (data) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBoxData = {};\n      var isRotated;\n      var isScaled;\n      var ratio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== image.rotate) {\n            image.rotate = data.rotate;\n            this.isRotated = isRotated = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== image.scaleX) {\n            image.scaleX = data.scaleX;\n            isScaled = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== image.scaleY) {\n            image.scaleY = data.scaleY;\n            isScaled = true;\n          }\n        }\n\n        if (isRotated) {\n          this.renderCanvas();\n        } else if (isScaled) {\n          this.renderImage();\n        }\n\n        ratio = image.width / image.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvas.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvas.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n    },\n\n    /**\n     * Get the container size data\n     *\n     * @return {Object} data\n     */\n    getContainerData: function () {\n      return this.isBuilt ? this.container : {};\n    },\n\n    /**\n     * Get the image position and size data\n     *\n     * @return {Object} data\n     */\n    getImageData: function () {\n      return this.isLoaded ? this.image : {};\n    },\n\n    /**\n     * Get the canvas position and size data\n     *\n     * @return {Object} data\n     */\n    getCanvasData: function () {\n      var canvas = this.canvas;\n      var data = {};\n\n      if (this.isBuilt) {\n        $.each([\n          'left',\n          'top',\n          'width',\n          'height',\n          'naturalWidth',\n          'naturalHeight'\n        ], function (i, n) {\n          data[n] = canvas[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCanvasData: function (data) {\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvas.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvas.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvas.width = data.width;\n          canvas.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvas.height = data.height;\n          canvas.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Get the crop box position and size data\n     *\n     * @return {Object} data\n     */\n    getCropBoxData: function () {\n      var cropBox = this.cropBox;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          left: cropBox.left,\n          top: cropBox.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCropBoxData: function (data) {\n      var cropBox = this.cropBox;\n      var aspectRatio = this.options.aspectRatio;\n      var isWidthChanged;\n      var isHeightChanged;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.isBuilt && this.isCropped && !this.isDisabled && $.isPlainObject(data)) {\n\n        if (isNumber(data.left)) {\n          cropBox.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBox.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          isWidthChanged = true;\n          cropBox.width = data.width;\n        }\n\n        if (isNumber(data.height)) {\n          isHeightChanged = true;\n          cropBox.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (isWidthChanged) {\n            cropBox.height = cropBox.width / aspectRatio;\n          } else if (isHeightChanged) {\n            cropBox.width = cropBox.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n    },\n\n    /**\n     * Get a canvas drawn the cropped image\n     *\n     * @param {Object} options (optional)\n     * @return {HTMLCanvasElement} canvas\n     */\n    getCroppedCanvas: function (options) {\n      var originalWidth;\n      var originalHeight;\n      var canvasWidth;\n      var canvasHeight;\n      var scaledWidth;\n      var scaledHeight;\n      var scaledRatio;\n      var aspectRatio;\n      var canvas;\n      var context;\n      var data;\n\n      if (!this.isBuilt || !SUPPORT_CANVAS) {\n        return;\n      }\n\n      if (!this.isCropped) {\n        return getSourceCanvas(this.$clone[0], this.image);\n      }\n\n      if (!$.isPlainObject(options)) {\n        options = {};\n      }\n\n      data = this.getData();\n      originalWidth = data.width;\n      originalHeight = data.height;\n      aspectRatio = originalWidth / originalHeight;\n\n      if ($.isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      }\n\n      // The canvas element will use `Math.floor` on a float number, so floor first\n      canvasWidth = floor(scaledWidth || originalWidth);\n      canvasHeight = floor(scaledHeight || originalHeight);\n\n      canvas = $('<canvas>')[0];\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      context = canvas.getContext('2d');\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      context.drawImage.apply(context, (function () {\n        var source = getSourceCanvas(this.$clone[0], this.image);\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        var canvas = this.canvas;\n        var params = [source];\n\n        // Source canvas\n        var srcX = data.x + canvas.naturalWidth * (abs(data.scaleX || 1) - 1) / 2;\n        var srcY = data.y + canvas.naturalHeight * (abs(data.scaleY || 1) - 1) / 2;\n        var srcWidth;\n        var srcHeight;\n\n        // Destination canvas\n        var dstX;\n        var dstY;\n        var dstWidth;\n        var dstHeight;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);\n        }\n\n        // All the numerical parameters should be integer for `drawImage` (#476)\n        params.push(floor(srcX), floor(srcY), floor(srcWidth), floor(srcHeight));\n\n        // Scale destination sizes\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        }\n\n        // Avoid \"IndexSizeError\" in IE and Firefox\n        if (dstWidth > 0 && dstHeight > 0) {\n          params.push(floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));\n        }\n\n        return params;\n      }).call(this));\n\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box\n     *\n     * @param {Number} aspectRatio\n     */\n    setAspectRatio: function (aspectRatio) {\n      var options = this.options;\n\n      if (!this.isDisabled && !isUndefined(aspectRatio)) {\n\n        // 0 -> NaN\n        options.aspectRatio = max(0, aspectRatio) || NaN;\n\n        if (this.isBuilt) {\n          this.initCropBox();\n\n          if (this.isCropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n    },\n\n    /**\n     * Change the drag mode\n     *\n     * @param {String} mode (optional)\n     */\n    setDragMode: function (mode) {\n      var options = this.options;\n      var croppable;\n      var movable;\n\n      if (this.isLoaded && !this.isDisabled) {\n        croppable = mode === ACTION_CROP;\n        movable = options.movable && mode === ACTION_MOVE;\n        mode = (croppable || movable) ? mode : ACTION_NONE;\n\n        this.$dragBox.\n          data(DATA_ACTION, mode).\n          toggleClass(CLASS_CROP, croppable).\n          toggleClass(CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n\n          // Sync drag mode to crop box when it is not movable(#300)\n          this.$face.\n            data(DATA_ACTION, mode).\n            toggleClass(CLASS_CROP, croppable).\n            toggleClass(CLASS_MOVE, movable);\n        }\n      }\n    }\n  };\n\n  Cropper.DEFAULTS = {\n\n    // Define the view mode of the cropper\n    viewMode: 0, // 0, 1, 2, 3\n\n    // Define the dragging mode of the cropper\n    dragMode: 'crop', // 'crop', 'move' or 'none'\n\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n\n    // An object with the previous cropping result data\n    data: null,\n\n    // A jQuery selector for adding extra containers to preview\n    preview: '',\n\n    // Re-render the cropper when resize the window\n    responsive: true,\n\n    // Restore the cropped area after resize the window\n    restore: true,\n\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n\n    // Show the black modal\n    modal: true,\n\n    // Show the dashed lines for guiding\n    guides: true,\n\n    // Show the center indicator for guiding\n    center: true,\n\n    // Show the white modal to highlight the crop box\n    highlight: true,\n\n    // Show the grid background\n    background: true,\n\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n\n    // Enable to move the image\n    movable: true,\n\n    // Enable to rotate the image\n    rotatable: true,\n\n    // Enable to scale the image\n    scalable: true,\n\n    // Enable to zoom the image\n    zoomable: true,\n\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n\n    // Enable to move the crop box\n    cropBoxMovable: true,\n\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n\n    // Shortcuts of events\n    build: null,\n    built: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  Cropper.setDefaults = function (options) {\n    $.extend(Cropper.DEFAULTS, options);\n  };\n\n  Cropper.TEMPLATE = (\n    '<div class=\"cropper-container\">' +\n      '<div class=\"cropper-wrap-box\">' +\n        '<div class=\"cropper-canvas\"></div>' +\n      '</div>' +\n      '<div class=\"cropper-drag-box\"></div>' +\n      '<div class=\"cropper-crop-box\">' +\n        '<span class=\"cropper-view-box\"></span>' +\n        '<span class=\"cropper-dashed dashed-h\"></span>' +\n        '<span class=\"cropper-dashed dashed-v\"></span>' +\n        '<span class=\"cropper-center\"></span>' +\n        '<span class=\"cropper-face\"></span>' +\n        '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' +\n        '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' +\n        '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' +\n        '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' +\n      '</div>' +\n    '</div>'\n  );\n\n  // Save the other cropper\n  Cropper.other = $.fn.cropper;\n\n  // Register as jQuery plugin\n  $.fn.cropper = function (option) {\n    var args = toArray(arguments, 1);\n    var result;\n\n    this.each(function () {\n      var $this = $(this);\n      var data = $this.data(NAMESPACE);\n      var options;\n      var fn;\n\n      if (!data) {\n        if (/destroy/.test(option)) {\n          return;\n        }\n\n        options = $.extend({}, $this.data(), $.isPlainObject(option) && option);\n        $this.data(NAMESPACE, (data = new Cropper(this, options)));\n      }\n\n      if (typeof option === 'string' && $.isFunction(fn = data[option])) {\n        result = fn.apply(data, args);\n      }\n    });\n\n    return isUndefined(result) ? this : result;\n  };\n\n  $.fn.cropper.Constructor = Cropper;\n  $.fn.cropper.setDefaults = Cropper.setDefaults;\n\n  // No conflict\n  $.fn.cropper.noConflict = function () {\n    $.fn.cropper = Cropper.other;\n    return this;\n  };\n\n});\n","/**\n * Created by jong on 7/29/15.\n */\n\nvar ILabCrop=function($,settings){\n    this.settings=settings;\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.cropper=this.modalContainer.find('.ilabc-cropper');\n    this.cropperData={};\n    this.modal_id=settings.modal_id;\n\n    var cropRef=this;\n    var resizeTimerId;\n    var isResizing=false;\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: this.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                console.log(response);\n                cropRef.bindUI(response);\n            });\n        }\n    });\n\n    $(window).resize(function() {\n        if (!isResizing)\n        {\n            data=cropRef.cropper.cropper('getData');\n            cropRef.settings.prev_crop_x=data.x;\n            cropRef.settings.prev_crop_y=data.y;\n            cropRef.settings.prev_crop_width=data.width;\n            cropRef.settings.prev_crop_height=data.height;\n        }\n\n        isResizing=true;\n        cropRef.updatePreviewWidth();\n        clearTimeout(resizeTimerId);\n        resizeTimerId = setTimeout(cropRef._resized, 250);\n    });\n\n\n    this.modalContainer.find('.ilabc-button-crop').on('click',function(e){\n        e.preventDefault();\n        cropRef.crop();\n        return false;\n    });\n\n    this._resized=function(){\n        cropRef.bindUI(cropRef.settings);\n        isResizing=false;\n    };\n\n    this.updatePreviewWidth=function() {\n        var width =  this.modalContainer.find('.ilab-crop-preview-title').width();\n        this.modalContainer.find('.ilab-crop-preview').css({\n            'height' : (width / cropRef.settings.aspect_ratio) + 'px',\n            'width' : width + 'px'\n        });\n    };\n\n    this.bindUI=function(settings){\n        this.settings=settings;\n\n        this.cropper.cropper('destroy');\n        this.cropper.off('built.cropper');\n\n        if (settings.hasOwnProperty('cropped_src') && settings.cropped_src !== null)\n        {\n            this.modalContainer.find('.ilab-current-crop-img').attr('src',settings.cropped_src);\n        }\n\n        if (settings.hasOwnProperty('size_title') && (settings.size_title !== null))\n        {\n            this.modalContainer.find('.ilabc-crop-size-title').text(\"Current \"+settings.size_title+\" (\"+settings.min_width+\" x \"+settings.min_height+\")\");\n        }\n\n        if (typeof settings.aspect_ratio !== 'undefined')\n        {\n            this.updatePreviewWidth();\n\n            if ((typeof settings.prev_crop_x !== 'undefined') && (settings.prev_crop_x !== null)) {\n                this.cropperData = {\n                    x : settings.prev_crop_x,\n                    y : settings.prev_crop_y,\n                    width : settings.prev_crop_width,\n                    height : settings.prev_crop_height\n                };\n                console.log(this.cropperData);\n            }\n\n            this.cropper.on('built.cropper',function(){\n                cropRef.updatePreviewWidth();\n            }).on('crop.cropper',function(e){\n                //console.log(e.x, e.y, e.width, e.height);\n            }).cropper({\n                viewMode: 1,\n                aspectRatio : settings.aspect_ratio,\n                minWidth : settings.min_width,\n                minHeight : settings.min_height,\n                modal : true,\n                zoomable: false,\n                mouseWheelZoom: false,\n                dragCrop: false,\n                autoCropArea: 1,\n                movable: false,\n                data : this.cropperData,\n                checkImageOrigin: false,\n                checkCrossOrigin: false,\n                responsive: true,\n                preview: '#ilabm-container-'+this.modal_id+' .ilab-crop-preview'\n            });\n        }\n    };\n\n    this.crop=function(){\n        var cropRef=this;\n\n        this.displayStatus('Saving crop ...');\n\n        var data = this.cropper.cropper('getData');\n        data['action'] = 'ilab_perform_crop';\n        data['post'] = this.settings.image_id;\n        data['size'] = this.settings.size;\n        jQuery.post(ajaxurl, data, function(response) {\n            console.log(response);\n            if (response.status=='ok') {\n                cropRef.modalContainer.find('.ilab-current-crop-img').one('load',function(){\n                   cropRef.hideStatus();\n                });\n                cropRef.modalContainer.find('.ilab-current-crop-img').attr('src', response.src);\n            }\n            else\n                cropRef.hideStatus();\n        });\n    };\n\n    this.displayStatus=function(message){\n        cropRef.modalContainer.find('.ilabm-status-label').text(message);\n        cropRef.modalContainer.find('.ilabm-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        cropRef.modalContainer.find('.ilabm-status-container').addClass('is-hidden');\n    };\n\n    this.bindUI(settings);\n};\n","/**\n * Created by jong on 8/8/15.\n */\n\nvar ImgixComponents=(function(){\n    var byteToHex=function(byte) {\n        var hexChar = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n        return hexChar[(byte >> 4) & 0x0f] + hexChar[byte & 0x0f];\n    };\n\n    return {\n        utilities: {\n          byteToHex:byteToHex\n      }\n    };\n})();","(function($){\n\n    $.fn.imgixLabel=function(options){\n        var settings= $.extend({},options);\n\n        return this.each(function(){\n            var label=$(this);\n\n            var changeTimerId;\n\n            var currentVal=0;\n\n            var textInput=$('<input type=\"text\" class=\"imgix-label-editor is-hidden\" pattern=\"[0-9-]+\">');\n            label.parent().append(textInput);\n\n            textInput.on('keydown',function(e){\n                if (e.keyCode==27) {\n                    textInput.off('blur');\n                    textInput.off('input');\n\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(currentVal);\n\n                    label.text(currentVal);\n                }\n                else if (e.keyCode==13) {\n                    textInput.off('blur');\n                    textInput.off('input');\n\n                    var val=parseInt(textInput.val());\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n\n                    label.text(val);\n                }\n                else if (e.keyCode==38) {\n                    var val=parseInt(textInput.val());\n                    val++;\n                    textInput.val(val);\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n                    label.text(val);\n                }\n                else if (e.keyCode==40) {\n                    var val=parseInt(textInput.val());\n                    val--;\n                    textInput.val(val);\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n                    label.text(val);\n\n                }\n                else {\n                    if (e.keyCode<57)\n                        return true;\n                    else if ((e.keyCode>90) && (e.keyCode<105))\n                        return true;\n                    else if (e.keyCode==109)\n                        return true;\n                    else if (e.metaKey)\n                        return true;\n\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            label.on('click',function(e){\n                e.preventDefault();\n\n                textInput.on('input',function(){\n                    var val=parseInt(textInput.val());\n                    if (settings.hasOwnProperty('changed'))\n                    {\n                        clearTimeout(changeTimerId);\n                        changeTimerId = setTimeout(function(){\n                            settings.changed(val);\n                        }, 500);\n                    }\n\n                    label.text(val);\n                });\n\n                textInput.on('blur',function(){\n                    var val=parseInt(textInput.val());\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n\n                    label.text(val);\n                });\n\n                currentVal=(settings.hasOwnProperty('currentValue')) ? settings.currentValue() : 0;\n                textInput.val(currentVal);\n                textInput.removeClass('is-hidden');\n                textInput.select();\n                textInput.focus();\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixSlider=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.valueLabel=container.find('.imgix-param-title-right > h3');\n        this.slider=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var sliderRef=this;\n\n        this.container.find('.imgix-param-label').imgixLabel({\n            currentValue:function(){\n                return sliderRef.slider.val();\n            },\n            changed:function(newVal){\n                if (newVal==sliderRef.slider.val())\n                    return;\n\n                sliderRef.slider.val(newVal);\n                sliderRef.slider.hide().show(0);\n                sliderRef.delegate.preview();\n            }\n        });\n\n        this.resetButton.on('click',function(){\n            sliderRef.reset();\n        });\n\n        this.slider.on('input',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n        });\n\n        this.slider.on('change',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n            sliderRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixSlider.prototype.destroy=function() {\n        this.slider.off('input');\n        this.slider.off('change');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixSlider.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        this.valueLabel.text(val);\n        this.slider.val(val);\n        this.slider.hide().show(0);\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixSlider.prototype.saveValue=function(data) {\n        if (this.slider.val()!=this.defaultValue)\n            data[this.param]=this.slider.val();\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixColor=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.colorPicker=container.find('.imgix-param-color');\n        this.alphaSlider=container.find('.imgix-param-alpha');\n        this.type=container.data('param-type');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.param=container.data('param');\n        this.defaultValue=container.data('default-value');\n\n        var colorPickerRef=this;\n\n        if (this.type=='blend-color') {\n            this.blendParam=container.data('blend-param');\n            this.blendSelect = container.find('.imgix-param-blend');\n\n            var currentBlend=container.data('blend-value');\n            this.blendSelect.val(currentBlend);\n\n            this.blendSelect.on('change',function(){\n                colorPickerRef.delegate.preview();\n            });\n        }\n\n        this.colorPicker.wpColorPicker({\n            palettes: false,\n            change: function(event, ui) {\n                colorPickerRef.delegate.preview();\n            }\n        });\n\n        this.alphaSlider.on('change',function(){\n            colorPickerRef.delegate.preview();\n        });\n\n        this.resetButton.on('click',function(){\n            colorPickerRef.reset();\n        });\n    };\n\n    ImgixComponents.ImgixColor.prototype.destroy=function() {\n        this.alphaSlider.off('change');\n        if (this.type=='blend-color') {\n            this.blendSelect.off('change');\n        }\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixColor.prototype.reset=function(data) {\n        var blend='none';\n        var val;\n\n        console.log(data);\n\n        if ((data !== undefined) && data.hasOwnProperty(this.blendParam))\n        {\n            blend=data[this.blendParam];\n        }\n\n        if ((data !== undefined) && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n        }\n        else\n            val=this.defaultValue;\n\n        console.log('dagu');\n        console.log(val);\n\n        val=val.replace('#','');\n        if (val.length==8)\n        {\n            var alpha=(parseInt('0x'+val.substring(0,2))/255.0)*100.0;\n            val=val.substring(2);\n\n            this.alphaSlider.val(Math.round(alpha));\n            this.alphaSlider.hide().show(0);\n        } else {\n            this.alphaSlider.val(0);\n            this.alphaSlider.hide().show(0);\n        }\n\n        this.colorPicker.val('#'+val);\n        this.colorPicker.wpColorPicker('color', '#'+val);\n\n        if (this.type=='blend-color') {\n            this.blendSelect.val(blend);\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixColor.prototype.saveValue=function(data) {\n        if (this.alphaSlider.val()>0) {\n            data[this.param] = '#' + ImgixComponents.utilities.byteToHex(Math.round((parseFloat(this.alphaSlider.val()) / 100.0) * 255.0)) + this.colorPicker.val().replace('#', '');\n\n            if (this.type == 'blend-color') {\n                if (this.blendSelect.val()!='none') {\n                    data[this.blendParam] = this.blendSelect.val();\n                }\n            }\n        }\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixAlignment=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.alignmentParam=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var alignmentRef=this;\n\n        this.resetButton.on('click',function(){\n            alignmentRef.reset();\n        });\n\n        container.find('.imgix-alignment-button').on('click',function(){\n            var button=$(this);\n            alignmentRef.container.find('.imgix-alignment-button').each(function(){\n                $(this).removeClass('selected-alignment');\n            });\n\n            button.addClass('selected-alignment');\n            alignmentRef.alignmentParam.val(button.data('param-value'));\n            alignmentRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.destroy=function() {\n        this.resetButton.off('click');\n        this.container.find('.imgix-alignment-button').off('click');\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        if (val=='')\n            val=this.defaultValue;\n\n        this.container.find('.imgix-alignment-button').each(function(){\n            var button=$(this);\n            if (button.data('param-value')==val)\n                button.addClass('selected-alignment');\n            else\n                button.removeClass('selected-alignment');\n        });\n\n        this.alignmentParam.val(val);\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.saveValue=function(data) {\n        if (this.alignmentParam.val()!=this.defaultValue)\n            data[this.param]=this.alignmentParam.val();\n\n        return data;\n    };\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixMediaChooser=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.preview=container.find('.imgix-media-preview img');\n        this.mediaInput=container.find('.imgix-param');\n        this.selectButton=container.find('.imgix-media-button');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        this.uploader=wp.media({\n            title: 'Select Watermark',\n            button: {\n                text: 'Select Watermark'\n            },\n            multiple: false\n        });\n\n        var mediaRef=this;\n\n        this.resetButton.on('click',function(){\n            mediaRef.reset();\n        });\n\n        this.uploader.on('select', function() {\n            attachment = mediaRef.uploader.state().get('selection').first().toJSON();\n            mediaRef.mediaInput.val(attachment.id);\n            mediaRef.preview.attr('src',attachment.url);\n\n            mediaRef.delegate.preview();\n        });\n\n        this.selectButton.on('click',function(e){\n            e.preventDefault();\n            mediaRef.uploader.open();\n            return false;\n        });\n\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.destroy=function() {\n        this.selectButton.off('click');\n        this.uploader.off('select');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n            this.mediaInput.val(val);\n        }\n        else\n            this.mediaInput.val('');\n\n        if (data && data.hasOwnProperty(this.param+'_url'))\n        {\n            this.preview.attr('src',data[this.param+'_url']);\n        }\n        else\n        {\n            this.preview.removeAttr('src').replaceWith(this.preview.clone());\n            this.preview=this.container.find('.imgix-media-preview img');\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.saveValue=function(data) {\n        var val=this.mediaInput.val();\n\n        if (val && val!='')\n            data[this.param]=val;\n\n        return data;\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixPillbox=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.param=container.data('param');\n        this.values=container.data('param-values').split(',');\n        this.buttons=container.find('.ilabm-pill');\n        this.inputs={};\n\n        var pillboxRef=this;\n\n        this.buttons.each(function(){\n            var button=$(this);\n            var valueName=button.data('param');\n            pillboxRef.inputs[valueName]=pillboxRef.container.find(\"input[name='\"+valueName+\"']\");\n            button.on('click',function(e){\n                e.preventDefault();\n\n                if (pillboxRef.inputs[valueName].val()==0)\n                {\n                    pillboxRef.inputs[valueName].val(1);\n                    button.addClass('pill-selected');\n                }\n                else\n                {\n                    pillboxRef.inputs[valueName].val(0);\n                    button.removeClass('pill-selected');\n                }\n\n                pillboxRef.delegate.preview();\n\n                return false;\n            });\n        });\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.destroy=function() {\n        this.buttons.off('click');\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.reset=function(data) {\n        this.buttons.each(function(){\n           $(this).removeClass('pill-selected');\n        });\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            pillboxRef.inputs[key].val(0);\n        });\n\n        if (data && data.hasOwnProperty(this.param)) {\n            var val = data[this.param].split(',');\n\n\n            val.forEach(function (key, index) {\n                pillboxRef.inputs[key].val(1);\n                pillboxRef.container.find('imgix-pill-' + key).addClass('pill-selected');\n            });\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.saveValue=function(data) {\n        var vals=[];\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            if (pillboxRef.inputs[key].val()==1)\n                vals.push(key);\n        });\n\n        if (vals.length>0)\n            data[this.param]=vals.join(',');\n\n        return data;\n    };\n\n}(jQuery));\n","/**\n * Created by jong on 8/9/15.\n */\n\nvar ILabImgixPresets=function($,delegate,container) {\n\n    this.delegate=delegate;\n    this.container=container.find('.ilabm-bottom-bar');\n    this.presetSelect=this.container.find('.imgix-presets');\n    this.presetContainer=this.container.find('.imgix-preset-container');\n    this.presetDefaultCheckbox=this.container.find('.imgix-preset-make-default');\n\n    var self=this;\n\n    self.presetSelect.on('change',function(){\n        if (self.presetSelect.val==0)\n        {\n            self.delegate.resetAll();\n            self.presetDefaultCheckbox.prop('checked',false);\n            return;\n        }\n\n        var preset=self.delegate.settings.presets[self.presetSelect.val()];\n        if (preset.default_for==self.delegate.settings.size)\n            self.presetDefaultCheckbox.prop('checked',true);\n\n        self.delegate.bindPreset(preset);\n    });\n\n    this.container.find('.imgix-new-preset-button').on('click',function(){\n        self.newPreset();\n    });\n\n    this.container.find('.imgix-save-preset-button').on('click',function(){\n        self.savePreset();\n    });\n\n    this.container.find('.imgix-delete-preset-button').on('click',function(){\n        self.deletePreset();\n    });\n\n    this.init=function() {\n        self.presetSelect.find('option').remove();\n\n        if (Object.keys(self.delegate.settings.presets).length==0)\n        {\n            self.presetContainer.addClass('is-hidden');\n        }\n        else\n        {\n            Object.keys(self.delegate.settings.presets).forEach(function(key,index) {\n                console.log(key);\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",'0')\n                    .text('None'));\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",key)\n                    .text(self.delegate.settings.presets[key].title));\n            });\n\n            self.presetContainer.removeClass('is-hidden');\n            self.presetSelect.val(self.delegate.settings.currentPreset);\n        }\n    };\n\n    this.clearSelected=function(){\n        self.presetSelect.val(0);\n        self.presetDefaultCheckbox.prop('checked',false);\n    };\n\n    this.setCurrentPreset=function(preset, is_default){\n        if (is_default)\n            self.presetDefaultCheckbox.prop('checked',true);\n        else\n            self.presetDefaultCheckbox.prop('checked',false);\n\n        self.presetSelect.val(preset);\n    };\n\n    this.newPreset=function(){\n        var name=prompt(\"New preset name\");\n        if (name!=null)\n        {\n            self.delegate.displayStatus('Saving preset ...');\n\n            var data={};\n            data['name']=name;\n            if (self.presetDefaultCheckbox.is(':checked'))\n                data['make_default']=1;\n\n            self.delegate.postAjax('ilab_imgix_new_preset', data, function(response) {\n                self.delegate.hideStatus();\n                if (response.status=='ok')\n                {\n                    self.delegate.settings.currentPreset=response.currentPreset;\n                    self.delegate.settings.presets=response.presets;\n\n                    self.init();\n                }\n            });\n        }\n    };\n\n    this.savePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        self.delegate.displayStatus('Saving preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n        if (self.presetDefaultCheckbox.is(':checked'))\n            data['make_default']=1;\n\n        self.delegate.postAjax('ilab_imgix_save_preset', data, function(response) {\n            self.delegate.hideStatus();\n        });\n    };\n\n    this.deletePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        if (!confirm(\"Are you sure you want to delete this preset?\"))\n            return;\n\n        self.delegate.displayStatus('Delete preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n\n        self.delegate.postAjax('ilab_imgix_delete_preset', data, function(response) {\n            self.delegate.hideStatus();\n            if (response.status=='ok')\n            {\n                self.delegate.settings.currentPreset=response.currentPreset;\n                self.delegate.settings.presets=response.presets;\n\n                self.init();\n\n                self.delegate.bindUI(response);\n            }\n        });\n    };\n\n    this.init();\n};","(function($){\n\n    $.fn.ilabSidebarTabs=function(options){\n        var settings= $.extend({},options);\n\n        var firstTab=false;\n        return this.find('.ilabm-sidebar-tab').each(function(){\n            var tab=$(this);\n            var target=settings.container.find('.'+tab.data('target'));\n\n            if (!firstTab)\n            {\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                firstTab=true;\n            }\n\n            tab.on('click',function(e){\n                e.preventDefault();\n\n                settings.container.find(\".ilabm-sidebar-tab\").each(function() {\n                    var otherTab = $(this);\n                    var tabTarget = settings.container.find('.' + otherTab.data('target'));\n\n                    otherTab.removeClass('active-tab');\n                    tabTarget.addClass('is-hidden');\n                });\n\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","/**\n * Image Editing Module\n */\n\nvar ILabImageEdit=function($, settings){\n    console.log(settings);\n\n    this.previewTimeout=null;\n    this.previewsSuspended=false;\n    this.parameters=[];\n\n    var self=this;\n\n    this.settings=settings;\n\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.waitModal=this.modalContainer.find('.ilabm-preview-wait-modal');\n    this.previewImage=this.modalContainer.find('.imgix-preview-image');\n\n    this.presets=new ILabImgixPresets($,this,this.modalContainer);\n\n    this.modalContainer.find('.imgix-button-reset-all').on('click',function(){\n        self.resetAll();\n    });\n    this.modalContainer.find('.imgix-button-save-adjustments').on('click',function(){\n        self.apply();\n    });\n\n    this.modalContainer.find('.imgix-parameter').each(function(){\n        var container=$(this);\n        var type=container.data('param-type');\n        if (type=='slider')\n            self.parameters.push(new ImgixComponents.ImgixSlider(self,container));\n        else if ((type=='color') || (type=='blend-color'))\n            self.parameters.push(new ImgixComponents.ImgixColor(self,container));\n        else if (type=='pillbox')\n            self.parameters.push(new ImgixComponents.ImgixPillbox(self,container));\n        else if (type=='media-chooser')\n            self.parameters.push(new ImgixComponents.ImgixMediaChooser(self,container));\n        else if (type=='alignment')\n            self.parameters.push(new ImgixComponents.ImgixAlignment(self,container));\n    });\n\n    this.modalContainer.on('click','.imgix-pill',function(){\n        var paramName=$(this).data('param');\n        var param=self.modalContainer.find('#imgix-param-'+paramName);\n        if (param.val()==1)\n        {\n            param.val(0);\n            $(this).removeClass('pill-selected');\n        }\n        else\n        {\n            param.val(1);\n            $(this).addClass('pill-selected');\n        }\n\n        self.preview();\n    });\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: self.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                console.log(response);\n                self.bindUI(response);\n            });\n        }\n    });\n\n    this.modalContainer.find(\".ilabm-sidebar-tabs\").ilabSidebarTabs({\n        delegate: this,\n        container: this.modalContainer\n    });\n\n    /**\n     * Performs the wordpress ajax post\n     * @param action\n     * @param data\n     * @param callback\n     * @private\n     */\n    this.postAjax=function(action,data,callback){\n        var postData={};\n        self.parameters.forEach(function(value,index){\n            postData=value.saveValue(postData);\n        });\n\n        console.log(postData);\n\n        data['image_id'] = self.settings.image_id;\n        data['action'] = action;\n        data['size'] = self.settings.size;\n        data['settings']=postData;\n\n        $.post(ajaxurl, data, callback);\n    }\n\n    /**\n     * Performs the actual request for a preview to be generated\n     * @private\n     */\n    function _preview(){\n        self.displayStatus('Building preview ...');\n\n        self.waitModal.removeClass('is-hidden');\n\n        self.postAjax('ilab_imgix_preview',{},function(response) {\n            if (response.status=='ok')\n            {\n                if (self.settings.debug)\n                    console.log(response.src);\n\n                self.previewImage.on('load',function(){\n                    self.waitModal.addClass('is-hidden');\n                    self.hideStatus();\n                });\n\n                self.previewImage.attr('src',response.src);\n            }\n            else\n            {\n                self.waitModal.addClass('is-hidden');\n                self.hideStatus();\n            }\n        });\n    }\n\n    /**\n     * Requests a preview to be generated.\n     */\n    this.preview=function(){\n        if (self.previewsSuspended)\n            return;\n\n        ILabModal.makeDirty();\n\n        clearTimeout(self.previewTimeout);\n        self.previewTimeout=setTimeout(_preview,500);\n    };\n\n    /**\n     * Binds the UI to the json response when selecting a tab or changing a preset\n     * @param data\n     */\n    this.bindUI=function(data){\n        if (data.hasOwnProperty('currentPreset') && (data.currentPreset!=null) && (data.currentPreset!='')) {\n            var p=self.settings.presets[data.currentPreset];\n            self.presets.setCurrentPreset(data.currentPreset,(p.default_for==data.size));\n        }\n        else\n            self.presets.clearSelected();\n\n        self.previewsSuspended=true;\n        self.settings.size=data.size;\n        self.settings.settings=data.settings;\n\n        var rebind=function(){\n            self.previewImage.off('load',rebind);\n            self.parameters.forEach(function(value,index){\n                value.reset(data.settings);\n            });\n\n            self.previewsSuspended=false;\n            ILabModal.makeClean();\n        };\n\n        if (data.src)\n        {\n            self.previewImage.on('load',rebind);\n            self.previewImage.attr('src',data.src);\n        }\n        else\n            rebind();\n    };\n\n    this.bindPreset=function(preset){\n        console.log(preset);\n        self.previewsSuspended=true;\n        self.settings.settings=preset.settings;\n\n        self.previewImage.off('load');\n        self.parameters.forEach(function(value,index){\n            value.reset(self.settings.settings);\n        });\n\n        self.previewsSuspended=false;\n        self.preview();\n    };\n\n\n    this.apply=function(){\n        self.displayStatus('Saving adjustments ...');\n\n        self.postAjax('ilab_imgix_save', {}, function(response) {\n            self.hideStatus();\n            ILabModal.makeClean();\n        });\n    };\n\n    /**\n     * Reset all of the values\n     */\n    this.resetAll=function(){\n        self.parameters.forEach(function(value,index){\n            value.reset();\n        });\n    };\n\n    this.displayStatus=function(message){\n        self.modalContainer.find('.ilabm-status-label').text(message);\n        self.modalContainer.find('.ilabm-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        self.modalContainer.find('.ilabm-status-container').addClass('is-hidden');\n    };\n};\n\n"],"sourceRoot":"js/"}